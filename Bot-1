from typing import AsyncIterable
from unicodedata import name
import discord
import datetime
from discord.ext import commands, tasks
import requests


intents = discord.Intents.all()

# Comando pra chamar o Bot

#-----------------------------------------------------------------------------------

bot = commands.Bot(command_prefix="!", intents=intents)

# Evento que mostra o Bot Funcionando

@bot.event
async def on_ready():
   print(f"Estou pronto! Estou conectado como {bot.user}")
   # current_time.start()

#-----------------------------------------------------------------------------------

# Fun√ß√£o rea√ß√£o
 
@bot.event
async def on_reaction_add(reaction, user):
   print(reaction.emoji)
   if reaction.emoji == "üê∂":
      role = user.guild.get_role(1035259000763207700)
      await user.add_roles(role)
   elif reaction.emoji == "üò∏":
      role = user.guild.get_role(1035259392645410907)
      await user.add_roles(role)



#-----------------------------------------------------------------------------------

# Fun√ß√£o para deletar certos tipos de mensagem

@bot.event
async def on_message(message):
    if message.author == bot.user: 
         return

    if "palavr√£o" in message.content:

        await message.channel.send(f"Por favor, {message.author.name}, n√£o ofenda os demais usu√°rios!")

        await message.delete()

    await bot.process_commands(message) #Linha para executar todos os porgramas a seguir

#-----------------------------------------------------------------------------------

# Fun√ß√£o de dar "Oi" 

@bot.command(name="oi")
async def send_hello(ctx):
    name = ctx.author.name

    response= "Ol√°, miauau üò∏üê∂ü´∂" + name 

    await ctx.send(response)

#-----------------------------------------------------------------------------------

#C√≥digo de loop task

# @tasks.loop(seconds=10)
# async def current_time():
#    now = datetime.datetime.now() 

#    now =now.strftime("%d/%m/%Y √†s %H:%M:%S")

#    chanel = bot.get_channel(1034558139258908762)

#    await chanel.send("Data ataual:"+now)

# Fun√ß√£o de liga√ß√£o com o Bot

#-----------------------------------------------------------------------------------

# Fun√ß√£o para calcular

@bot.command(name="Calc")
async def calculate_expression(ctx, *expression):
   expression = "".join(expression)
   
   response = eval(expression)

   await ctx.send("A resposta √©: "+ str(response))

#-----------------------------------------------------------------------------------

# Fun√ß√£o de consumir APIs

# @bot.command()
# async def binance(ctx, coin, base):
#    try:
#       response = requests.get(f"https://api.binance.com/api/v3/ticker/price?symbol={coin.upper()}{base.upper()}")
      
#       data = response.json()
#       price = data.get("price")

#       if price:
#          await ctx.send(f"O valor do par {coin}/{base} √© {price}")
#       else:
#          await ctx.send(f"O valor do par {coin}/{base} √© inv√°lido")
#    except Exception as error:
#       await ctx.send("ERRO")
#       print(error)

#-----------------------------------------------------------------------------------

# Fun√ß√£o mensagem secreta

@bot.command(name="Segredo")
async def secret(ctx):
   try:
      await ctx.author.send('Miauau, voc√™ √© incrivel!üò∏üê∂ü´∂')
   except discord.errors.Forbidden:
      await ctx.send("N√£o posso te contar o segredo! Voc√™ bloqueio minha mensagem!")
   
#-----------------------------------------------------------------------------------

# Criando com Embed 

@bot.command(name="foto")
async def get_random_image(ctx): 
   url_image = "https://picsum.photos/1920/1080"

   embed = discord.Embed (
      title = "Resultado da busca de imagem!", # Titulo
      description = "PS: A busca √© aleat√≥ria!", # Descri√ß√£o
      color = 0x0000FF,
   )
   
   embed.set_author(name=bot.user.name, icon_url = bot.user.avatar) # Autor

   embed.set_footer(text=bot.user.name, icon_url = bot.user.avatar) # Rodap√© 

   embed.add_field(name="API", value="Usamos a API do https://picsum.photos")

   embed.add_field(name="Par√¢metros", value="{largura}/{altura}")

   embed.add_field(name="Exemplo", value=url_image, inline=False)

   embed.set_image(url=url_image) # Setar uma imagem

   await ctx.send(embed=embed)

bot.run("-")
